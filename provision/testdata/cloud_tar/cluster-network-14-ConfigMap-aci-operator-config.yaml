apiVersion: v1
data:
  spec: "{\n    \"flavor\": \"cloud\",\n    \"config\": \"
apiVersion: v1
kind: Namespace
metadata:
  name: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
    openshift.io/run-level: "0"
  annotations:
    openshift.io/node-selector: ''
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: epgs.aci.aw
spec:
  group: aci.aw
  names:
    kind: Epg
    listKind: EpgList
    plural: epgs
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: contracts.aci.aw
spec:
  group: aci.aw
  names:
    kind: Contract
    listKind: ContractList
    plural: contracts
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: podifs.aci.aw
spec:
  group: aci.aw
  names:
    kind: PodIF
    listKind: PodIFList
    plural: podifs
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: gbpsstates.aci.aw
spec:
  group: aci.aw
  names:
    kind: GBPSState
    listKind: GBPSStateList
    plural: gbpsstates
  scope: Namespaced
  version: v1
  subresources:
    status: {}
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatglobalinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatGlobalInfo
    listKind: SnatGlobalInfoList
    plural: snatglobalinfos
    singular: snatglobalinfo
  scope: Namespaced
  version: v1
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: snatpolicies.aci.snat
spec:
  group: aci.snat
  names:
    kind: SnatPolicy
    listKind: SnatPolicyList
    plural: snatpolicies
    singular: snatpolicy
  scope: Cluster
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          properties:
            selector:
              properties:
                labels:
                  type: object
                  properties:
                    additionalProperties:
                      type: string
                namespace:
                  type: string
              type: object
            snatIp:
              type: array
            destIp:
              type: array
          type: object
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: nodeinfos.aci.snat
spec:
  group: aci.snat
  names:
    kind: NodeInfo
    listKind: NodeInfoList
    plural: nodeinfos
    singular: nodeinfo
  scope: Namespaced
  version: v1
  versions:
  - name: v1
    served: true
    storage: true
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: rdconfigs.aci.snat
spec:
  group: aci.snat
  names:
    kind: RdConfig
    listKind: RdConfigList
    plural: rdconfigs
    singular: rdconfig
  scope: Namespaced
  version: v1
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aci-containers-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
  controller-config: |-
    {
        "log-level": "info",
        "apic-hosts": [
            "localhost:50000"
        ],
        "apic-username": "clusterjj",
        "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
        "apic-use-inst-tag": true,
        "aci-prefix": "clusterjj",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "clusterjj",
        "aci-vmm-controller": "clusterjj",
        "aci-policy-tenant": "kuber",
        "require-netpol-annot": false,
        "lb-type": "None",
        "aci-service-phys-dom": "clusterjj-pdom",
        "aci-service-encap": "vlan-None",
        "aci-service-monitor-interval": 5,
        "aci-pbr-tracking-non-snat": false,
        "aci-vrf-tenant": "kuber",
        "aci-l3out": null,
        "aci-ext-networks": null,
        "aci-vrf": "clusterjj_overlay",
        "default-endpoint-group": {
            "policy-space": "kuber",
            "name": "aci-containers-default"
        },
        "max-nodes-svc-graph": 32,
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "istio-operator": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "istio-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "kube-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            }        },
        "service-ip-pool": [
            {
                "end": "10.3.0.254",
                "start": "10.3.0.2"
            }
        ],
        "snat-contract-scope": "global",
        "static-service-ip-pool": [
            {
                "end": "10.4.0.254",
                "start": "10.4.0.2"
            }
        ],
        "pod-ip-pool": [
            {
                "end": "14.3.255.254",
                "start": "14.3.0.2"
            }
        ],
        "pod-subnet-chunk-size": 32,
        "node-service-ip-pool": [
            {
                "end": "10.5.0.254",
                "start": "10.5.0.2"
            }
        ],
        "node-service-subnets": [
            "10.5.0.1/24"
        ]
    }
  host-agent-config: |-
    {
        "ep-registry": "k8s",
        "opflex-mode": "overlay",
        "log-level": "info",
        "aci-snat-namespace": "aci-containers-system",
        "aci-vmm-type": "Kubernetes",
        "aci-vmm-domain": "clusterjj",
        "aci-vmm-controller": "clusterjj",
        "aci-prefix": "clusterjj",
        "aci-vrf": "clusterjj_overlay",
        "aci-vrf-tenant": "kuber",
        "service-vlan": null,
        "kubeapi-vlan": null,
        "pod-subnet": "14.3.0.1/16",
        "node-subnet": "31.0.1.0/24",
        "encap-type": "vxlan",
        "aci-infra-vlan": null,
        "cni-netconfig": [
            {
                "gateway": "14.3.0.1",
                "routes": [
                    {
                        "dst": "0.0.0.0/0",
                        "gw": "14.3.0.1"
                    }
                ],
                "subnet": "14.3.0.0/16"
            }
        ],
        "default-endpoint-group": {
            "policy-space": "kuber",
            "name": "aci-containers-default"
        },
        "namespace-default-endpoint-group": {
            "aci-containers-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "istio-operator": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "istio-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            },
            "kube-system": {
                "policy-space": "kuber",
            "name": "aci-containers-default"
            }        },
        "enable-drop-log": true
    }
  opflex-agent-config: |-
    {
        "log": {
            "level": "info"
        },
        "opflex": {
        }
    }
  gbp-server-config: |-
   {
        "aci-policy-tenant": "kuber",
        "aci-vrf": "clusterjj_overlay",
        "aci-vmm-domain": "clusterjj",
        "pod-subnet": "14.3.0.1/16",
        "apic": {
            "apic-hosts": [
            "localhost:50000"
        ],
            "apic-username": "clusterjj",
            "apic-private-key-path": "/usr/local/etc/aci-cert/user.key",
            "kafka": {
                "brokers": [
                    "localhost:9095"
                ],
                "client-key-path": "/certs/kafka-client.key",
                "client-cert-path": "/certs/kafka-client.crt",
                "ca-cert-path": "/certs/ca.crt",
                "topic": "clusterjj"
            },
            "cloud-info": {
                "cluster-name": "clusterjj",
                "subnet": "acct-[kuber]/region-[us-east-2]/context-[clusterjj_overlay]-addr-[14.3.0.0/16]/cidr-[14.3.0.0/16]/subnet-[14.3.0.0/16]",
                "vrf": "acct-[kuber]/region-[us-east-2]/context-[clusterjj_overlay]-addr-[14.3.0.0/16]"
            }
        }
   }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: snat-operator-config
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
data:
    "start": "5000"
    "end": "65000"
    "ports-per-node": "3000"
---
apiVersion: v1
kind: Secret
metadata:
  name: aci-user-cert
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
data:
  user.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUNkZ0lCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQW1Bd2dnSmNBZ0VBQW9HQkFMTG5ET0tQWHcxOEpjcHEKeHJDZkRtbjlkWGRleXBreld4VlRidGRINFh5YTBQN0x6M0tuMzlWZzNsS25acHFWeUJiY3pNVmtzSWowbWdSMgpiM2hoZThLS1JJM2x2QlRLVVZnbEhFUzBQeDJtMlNKN1laOHhjT1IxY2twN0pCQ2E3MWNUQVZaS0dQcFFNWkxrCnhWR1RqMW1vTzFTTGdQZlVHdzEwNytETzRVb2ZBZ01CQUFFQ2dZRUFwSmgrK2xMK0dPSUh3dHZLUWVXVTFWOGsKRzlkU2Z2RUk4KzMzSklvMW92YXRJajlSZFNPT2hEckRVVGhDNWlhNEdKQzh0VCtXUytyL2FPdXVVd3NkV0t0cwpXTWUwS203Rmc1bWVEa0N1NE1UU09Rbm41bmR4SW1oWmI4SnlzZ3R4WmdmVW5Xdm42NVRpUVJMQlRySVdCdjJYCjNTRHM5eVpaeTg2M0lTU2NDa0VDUVFEcTdIdDdNQTdNVTI4WnMzTjJ4dENMa1NKV0ZjZkt6Z1RWK0szT2Q4TlkKRXFvb1ZSYzdZMWZ4ajZNR3grNU9KOHFhNnlQa2Y5ZTc2WDl3NzNTbTYvWEZBa0VBd3ZQc1NoYXlVbTVUczJXbwp1V3hXemhrcnZYNHRWa3psOTk4aW5uY0dQeVVtODFLb0FtelpDTDRKREdrd1lFQmJsQmdpalorQjV0OEs4SWJjCkRyTWlrd0pBTnVGVDMyMVVwNnIrRTFUMnJsSzN1VU1JY0cvYUlxaUtQS3BCZ0RBK05ENzMvVUFUazA0YjUxU1UKMHlxMW94QnNwbEEwTEZjcFFMN0ZoTTZMdzhydnVRSkFDWU5abm12cEc3aWlnUGlPK1MxZU53Um5iQUhDT0puYwpCdkp1Z0FrUzF2WDdKcGg3OWxKVmJPWEpEei82eWxlWm9HcGxGVUFaV0tpOW9lc1N4ZXpiM1FKQUVQYko0VjdlCkF5VUVZOUJaQ1FLL0lpaHVoVy93dWNKc3dURGFySTdGSU4yL0RLUnRjL1dZQ1YxamZ6ZjQ5UGpVSnhjSHVxaGMKZGY5aVlaQXh2SHZFREE9PQotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0tCg==
  user.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI3RENDQVZVQ0FnUG9NQTBHQ1NxR1NJYjNEUUVCQlFVQU1ENHhDekFKQmdOVkJBWVRBbFZUTVJZd0ZBWUQKVlFRS0RBMURhWE5qYnlCVGVYTjBaVzF6TVJjd0ZRWURWUVFEREE1VmMyVnlJR05zZFhOMFpYSnFhakFlRncweQpNREExTVRVd09UVTNNekZhRncwek1EQTFNVE15TVRVM016RmFNRDR4Q3pBSkJnTlZCQVlUQWxWVE1SWXdGQVlEClZRUUtEQTFEYVhOamJ5QlRlWE4wWlcxek1SY3dGUVlEVlFRRERBNVZjMlZ5SUdOc2RYTjBaWEpxYWpDQm56QU4KQmdrcWhraUc5dzBCQVFFRkFBT0JqUUF3Z1lrQ2dZRUFzdWNNNG85ZkRYd2x5bXJHc0o4T2FmMTFkMTdLbVROYgpGVk51MTBmaGZKclEvc3ZQY3FmZjFXRGVVcWRtbXBYSUZ0ek14V1N3aVBTYUJIWnZlR0Y3d29wRWplVzhGTXBSCldDVWNSTFEvSGFiWkludGhuekZ3NUhWeVNuc2tFSnJ2VnhNQlZrb1krbEF4a3VURlVaT1BXYWc3Vkl1QTk5UWIKRFhUdjRNN2hTaDhDQXdFQUFUQU5CZ2txaGtpRzl3MEJBUVVGQUFPQmdRQ3lOcU5BODMrS1ZBSVg0V2ZMSXE4agpTckxKSDZUSDlCdUdJTnBaNlpzdWhPS2pwL0RrR2tiS29ad1c2TllpcjRBejNrMVhiZ2dtd2ZzdE84b3N2OVQ2CmxSc2doWGpTZmhmTUxXNjA0WGRSYW9HMWVqZG90WUxtV3B4M1h1bEY5TUN0RVp0ZVE4eWZleUI1UUJ0Qi9NZUMKTVU1c05vVXY0b1lQeE50bU9KRVFZUT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
---
apiVersion: v1
kind: Secret
metadata:
  name: kafka-client-certificates 
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
data:
  ca.crt: bm9uZQ==
  kafka-client.crt: bm9uZQ==
  kafka-client.key: bm9uZQ==
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aci-containers-host-agent
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers:controller
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - pods/exec
  - endpoints
  - services
  - events
  - replicationcontrollers
  verbs:
  - list
  - watch
  - get
  - patch
  - create
  - delete
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.aw"
  resources:
  - epgs
  - contracts
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.aw"
  resources:
  - podifs
  - gbpsstates
  - gbpsstates/status
  verbs:
  - '*'
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  - daemonsets
  - statefulsets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  - pods/exec
  - nodes
  - services/status
  verbs:
  - '*'
- apiGroups:
  - "monitoring.coreos.com"
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies/finalizers
  - snatpolicies/status
  - nodeinfos
  verbs:
  - update
  - create
  - list
  - watch
  - get
  - delete
- apiGroups:
  - "aci.snat"
  resources:
  - snatglobalinfos
  - snatpolicies
  - nodeinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
  - create
  - update
  - delete
- apiGroups:
  - apps.openshift.io
  resources:
  - deploymentconfigs
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
  name: aci-containers:host-agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - namespaces
  - pods
  - endpoints
  - services
  - replicationcontrollers
  verbs:
  - list
  - watch
  - get
  - update
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - "aci.aw"
  resources:
  - podifs
  - podifs/status
  verbs:
  - "*"
- apiGroups:
  - "networking.k8s.io"
  resources:
  - networkpolicies
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "apps"
  resources:
  - deployments
  - replicasets
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - snatpolicies
  - snatglobalinfos
  - rdconfigs
  verbs:
  - list
  - watch
  - get
- apiGroups:
  - "aci.snat"
  resources:
  - nodeinfos
  verbs:
  - create
  - update
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:controller
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:controller
subjects:
- kind: ServiceAccount
  name: aci-containers-controller
  namespace: aci-containers-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: aci-containers:host-agent
  labels:
    aci-containers-config-version: "dummy"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: aci-containers:host-agent
subjects:
- kind: ServiceAccount
  name: aci-containers-host-agent
  namespace: aci-containers-system
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-host
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-host
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-host
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
      initContainers:
        - name: cnideploy
          image: noirolabs/cnideploy:5.0.2.0.05bf1b8
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
      containers:
        - name: aci-containers-host
          image: noirolabs/aci-containers-host:ci_test
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - SYS_ADMIN
                - NET_ADMIN
                - SYS_PTRACE
          env:
            - name: KUBERNETES_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: TENANT
              value: "kuber"
            - name: NODE_EPG
              value: "aci-containers-nodes"
            - name: OPFLEX_MODE
              value: overlay
          volumeMounts:
            - name: cni-bin
              mountPath: /mnt/cni-bin
            - name: cni-conf
              mountPath: /mnt/cni-conf
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: host-config-volume
              mountPath: /usr/local/etc/aci-containers/
          livenessProbe:
            httpGet:
              path: /status
              port: 8090
        - name: opflex-agent
          env:
            - name: REBOOT_WITH_OVS
              value: "true"
            - name: SSL_MODE
              value: disabled
          image: noirolabs/opflex:ci_test
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: opflex-hostconfig-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/base-conf.d
            - name: opflex-config-volume
              mountPath: /usr/local/etc/opflex-agent-ovs/conf.d
        - name: opflex-server
          image: noirolabs/opflex-server:ci_test
          imagePullPolicy: Always
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
          ports:
            - containerPort: 19999
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
            - name: opflex-server-config-volume
              mountPath: /usr/local/etc/opflex-server
            - name: hostvar
              mountPath: /usr/local/var
        - name: mcast-daemon
          image: noirolabs/opflex:ci_test
          command: ["/bin/sh"]
          args: ["/usr/local/bin/launch-mcastdaemon.sh"]
          imagePullPolicy: Always
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
      restartPolicy: Always
      volumes:
        - name: cni-bin
          hostPath:
            path: /var/lib
        - name: cni-conf
          hostPath:
            path: /etc/kubernetes
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: host-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: host-agent-config
                path: host-agent.conf
        - name: opflex-hostconfig-volume
          emptyDir:
            medium: Memory
        - name: opflex-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: opflex-agent-config
                path: local.conf
        - name: opflex-server-config-volume
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: aci-containers-openvswitch
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
spec:
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      name: aci-containers-openvswitch
      network-plugin: aci-containers
  template:
    metadata:
      labels:
        name: aci-containers-openvswitch
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      hostPID: true
      hostIPC: true
      serviceAccountName: aci-containers-host-agent
      tolerations:
        - operator: Exists
      containers:
        - name: aci-containers-openvswitch
          image: noirolabs/openvswitch:ci_test
          imagePullPolicy: Always
          resources:
            limits:
              memory: "1Gi"
          securityContext:
            capabilities:
              add:
                - NET_ADMIN
                - SYS_MODULE
                - SYS_NICE
                - IPC_LOCK
          env:
            - name: OVS_RUNDIR
              value: /usr/local/var/run/openvswitch
          volumeMounts:
            - name: hostvar
              mountPath: /usr/local/var
            - name: hostrun
              mountPath: /run
            - name: hostrun
              mountPath: /usr/local/run
            - name: hostetc
              mountPath: /usr/local/etc
            - name: hostmodules
              mountPath: /lib/modules
          livenessProbe:
            exec:
              command:
                - /usr/local/bin/liveness-ovs.sh
      restartPolicy: Always
      volumes:
        - name: hostetc
          hostPath:
            path: /etc
        - name: hostvar
          hostPath:
            path: /var
        - name: hostrun
          hostPath:
            path: /run
        - name: hostmodules
          hostPath:
            path: /lib/modules
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: aci-containers-controller
  namespace: aci-containers-system
  labels:
    aci-containers-config-version: "dummy"
    network-plugin: aci-containers
    name: aci-containers-controller
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: aci-containers-controller
      network-plugin: aci-containers
  template:
    metadata:
      name: aci-containers-controller
      namespace: aci-containers-system
      labels:
        name: aci-containers-controller
        network-plugin: aci-containers
      annotations:
        scheduler.alpha.kubernetes.io/critical-pod: ''
    spec:
      hostNetwork: true
      serviceAccountName: aci-containers-controller
      tolerations:
        - operator: Exists
          effect: NoSchedule
      containers:
        - name: aci-gbpserver
          image: noirolabs/gbp-server:ci_test
          imagePullPolicy: Always
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: kafka-certs
              mountPath: /certs
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          env:
            - name: GBP_SERVER_CONF
              value: /usr/local/etc/aci-containers/gbp-server.conf
        - name: aci-containers-controller
          image: noirolabs/aci-containers-controller:ci_test
          imagePullPolicy: Always
          env:
            - name: WATCH_NAMESPACE
              value: ""
            - name: ACI_SNAT_NAMESPACE
              value: "aci-containers-system"
            - name: ACI_SNAGLOBALINFO_NAME
              value: "snatglobalinfo"
            - name: ACI_RDCONFIG_NAME
              value: "routingdomain-config"
          volumeMounts:
            - name: controller-config-volume
              mountPath: /usr/local/etc/aci-containers/
            - name: aci-user-cert-volume
              mountPath: /usr/local/etc/aci-cert/
          livenessProbe:
            httpGet:
              path: /status
              port: 8091
      volumes:
        - name: kafka-certs
          secret:
            secretName: kafka-client-certificates
        - name: aci-user-cert-volume
          secret:
            secretName: aci-user-cert
        - name: controller-config-volume
          configMap:
            name: aci-containers-config
            items:
              - key: controller-config
                path: controller.conf
              - key: gbp-server-config
                path: gbp-server.conf
---
apiVersion: aci.aw/v1
kind: PodIF
metadata:
  name: inet-route
  namespace: kube-system
status:
  epg: aci-containers-inet-out
  ipaddr: 0.0.0.0/0
\"\
    \n}"
kind: ConfigMap
metadata:
  labels:
    aci-containers-config-version: dummy
    network-plugin: aci-containers
  name: aci-operator-config
  namespace: aci-containers-system
